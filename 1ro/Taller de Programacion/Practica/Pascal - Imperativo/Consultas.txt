Cuando es mas eficiente usar recursividad o iteracion, usarla solo en arboles o en todo?
cuando usar un procedimiento y cuando una funcion en recursion
Hay que inicializar los arboles en la instancia anterior a la primera carga?
	arbol:= nil;
	procedimiento (a);

Consultar punto 3 de la practica 4: 
{
    c. Un módulo que reciba la estructura generada en i., dos códigos de alumnos y un valor
    entero, y retorne la cantidad de alumnos con cantidad de finales aprobados igual al
    valor ingresado para aquellos alumnos cuyos códigos están comprendidos entre los dos
    códigos de alumnos ingresados.
}

    procedure retornarIguales (a:arbol);
        function retornarCant (l:lista):integer;
        begin
            if (l = nil) then
                retornarCant:= 0
            else
                retornarCant := retornarCant(l^.sig) + 1;
        end;

        function encontrarIguales (a:arbol; cod1,cod2:integer; num:integer):integer;
        var
            act : integer;
        begin
            act:= 0;
            if (a = nil) then 
                encontrarIguales := 0
            else begin
                if (a^.data.codA >= cod1) then begin
                    if (a^.data.finales <> nil) then
                            act := retornarCant(a^.data.finales);
                    if (a^.data.codA <= cod2) and (act = num) then begin
                        encontrarIguales := 1 + encontrarIguales(a^.hi,cod1,cod2,num) + encontrarIguales(a^.hd,cod1,cod2,num) ;
                    end
                    else 
                        encontrarIguales:= encontrarIguales (a^.hi,cod1,cod2,num);
                end
                else
                    encontrarIguales := encontrarIguales(a^.hd,cod1,cod2,num);
            end;
        end;

    var
        cod1,cod2:integer;
        num:integer;
        cant:integer;
    begin
        write('Ingrese un numero base: ');readln(cod1);
        write('Ingrese un numero tope: ');readln(cod2);
        write('Ingrese un numero para comparar: ');readln(num);
        if (a = nil) then
            writeln('Arbol vacio.')
        else begin
            if (cod1 > cod2) then
                cant := encontrarIguales (a,cod2,cod1,num)
            else
                cant := encontrarIguales (a,cod1,cod2,num);
            writeln('La cantidad de alumnos cuya cantidad de finales aprobados');
            writeln('es igual al numero ingresado es: ', cant);
        end;
    end;



Function contarCant (ap:arbolP; cod:integer): integer;
Begin
  If (ap <> Nil) Then
    Begin
      If (ap^.data.num = cod) Then
        contarCant := contarCant (ap^.hi,cod) + contarCant (ap^.hd,cod) + 1
      Else
        contarCant := contarCant (ap^.hi,cod) + contarCant (ap^.hd,cod);
    End
  Else
    contarCant := 0;
End;

Function cantPrestamos(A: arbolI; num:integer): integer;
Begin
  If (A<>Nil) Then
    Begin
      If (A^.data.numS <> num) Then
        Begin
          cantPrestamos := cantPrestamos(A^.HI,num);
          cantPrestamos := cantPrestamos(A^.HD,num);
        End
      Else
        cantPrestamos := cantPrestamos(A^.HI,num) + cantPrestamos(A^.HD,num) + 1
    End
  Else
    cantPrestamos := 0;
End;